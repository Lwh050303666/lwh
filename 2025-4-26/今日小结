隐式类型转换
整型提升
定义：

C语言中字节数少于整型字节数的数据类型在进行整型运算时，该类型的数据会被默认转为整型数据。

理解：

运算器（ALU），其操作对象的字节大小被要求至少是int的字节数。数据在被运算时，数据并不是直接在ALU上存储的，而是存储在CPU的寄存器（register）中，而通用寄存器的字节大小与ALU操作数的字节大小保持一致。针对小于4byte的数据类型，会默认转化为整型数据

情况：

在数据类型为char（1byte）/short（2byte）时，需要考虑整型提升。

char：

当数据在-128~127之间时，可以用8bits（1byte）表示，不需要整型提升。但当数据超过时候则需要。

unsigned char：

当数据在0~255之间，不需要考虑整型提升。

转化方法：
位扩展（从窄类型到宽类型）

无符号类型（unsigned char、unsigned short 等）：零扩展 ——高位全部填 0，低位保留原值。​
informit.com

有符号类型（signed char、short 等）：符号扩展 ——将原符号位（最高位）的值复制到高位，低位保留原值。​
informit.com      例如：int main()
{
    char a=3；
    char b=127；
    char c=a+b;
    printf("%d",c);
}
————————————————
隐式类型转换总结：

存入数据时（char a=-1；char b=255）：存入补码，按照数据类型进行截断，例如char，则只保留8个bit

计算数据时（char c=a+b）：按照原数据类型进行整型提升，然后用补码相加减，再次截断存入（8位）

输出数据时（printf（"%d/%u"））:按照原数据类型进行整型提升，经过反码转化为原码（32位），最后根据%d/%u输出数据

double ←── float 高

↑

long

↑ unsigned

↑ int ←── char,short 低
